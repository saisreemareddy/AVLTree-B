/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 17 03:13:23 GMT 2022
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AVLTree_ESTest extends AVLTree_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(5393);
      aVLTree0.insert(869);
      aVLTree0.insert((-1));
      aVLTree0.delete(5393);
      aVLTree0.delete((-2901));
      aVLTree0.delete((-530));
      aVLTree0.delete((-924));
      aVLTree0.insert((-4125));
      aVLTree0.insert(5393);
      aVLTree0.delete(1062);
      aVLTree0.getRoot();
      aVLTree0.insert(1);
      aVLTree0.delete((-4125));
      aVLTree0.delete((-1));
      aVLTree0.insert(0);
      aVLTree0.find(0);
      aVLTree0.insert((-288));
      aVLTree0.delete((-924));
      aVLTree0.getRoot();
      aVLTree0.find((-288));
      aVLTree0.find(1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(746);
      aVLTree0.height();
      aVLTree0.height();
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      aVLTree_Node0.key = 0;
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      aVLTree_Node0.right = aVLTree_Node1;
      aVLTree0.getBalance(aVLTree_Node0);
      int int0 = 1;
      // Undeclared exception!
      try { 
        aVLTree0.insert(int0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      int int0 = 1;
      aVLTree0.insert(1);
      int int1 = 746;
      aVLTree0.insert(746);
      aVLTree0.height();
      aVLTree0.height();
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      aVLTree_Node0.key = 621;
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      aVLTree_Node0.right = aVLTree_Node1;
      aVLTree0.getBalance(aVLTree_Node0);
      // Undeclared exception!
      try { 
        aVLTree0.delete(int1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      int int0 = 1;
      aVLTree0.insert(1);
      aVLTree0.height();
      aVLTree0.height();
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      int int1 = 621;
      aVLTree_Node0.key = 621;
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      aVLTree_Node1.key = 0;
      aVLTree_Node0.left = aVLTree_Node1;
      aVLTree_Node0.right = aVLTree_Node1;
      aVLTree0.getBalance(aVLTree_Node0);
      // Undeclared exception!
      aVLTree0.delete(0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(5393);
      aVLTree0.insert(869);
      aVLTree0.delete(5393);
      aVLTree0.delete((-530));
      aVLTree0.delete((-530));
      aVLTree0.insert((-4125));
      aVLTree0.insert(5393);
      aVLTree0.delete((-1));
      aVLTree0.getRoot();
      aVLTree0.insert(1);
      aVLTree0.delete((-1));
      aVLTree0.insert(0);
      aVLTree0.find(0);
      aVLTree0.delete(869);
      aVLTree0.getRoot();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(1);
      aVLTree0.height();
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(1);
      aVLTree0.insert(0);
      aVLTree0.delete(0);
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree_Node0.height = 1;
      aVLTree0.delete(0);
      aVLTree0.insert(0);
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.getRoot();
      AVLTree.Node aVLTree_Node1 = aVLTree_Node0.left;
      aVLTree0.getBalance(aVLTree_Node1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(5393);
      aVLTree0.insert(869);
      aVLTree0.insert((-1));
      aVLTree0.delete(5393);
      aVLTree0.delete((-530));
      aVLTree0.delete((-924));
      aVLTree0.insert((-4125));
      aVLTree0.insert(5393);
      aVLTree0.delete(1062);
      aVLTree0.getRoot();
      aVLTree0.insert(1);
      aVLTree0.delete((-1));
      aVLTree0.insert(0);
      aVLTree0.find(0);
      aVLTree0.delete((-924));
      aVLTree0.getRoot();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(1);
      aVLTree0.insert(746);
      aVLTree0.height();
      aVLTree0.height();
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      aVLTree_Node0.key = 621;
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      aVLTree_Node0.right = aVLTree_Node1;
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.delete(0);
      aVLTree0.getRoot();
      aVLTree0.height();
      // Undeclared exception!
      aVLTree0.find(1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(1440);
      aVLTree0.delete((-1926));
      aVLTree0.insert((-1926));
      aVLTree0.insert((-290));
      aVLTree0.height();
      aVLTree0.height();
      aVLTree0.find((-126));
      aVLTree0.find(0);
      // Undeclared exception!
      try { 
        aVLTree0.insert((-1926));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-518));
      aVLTree0.delete((-518));
      aVLTree0.delete((-518));
      aVLTree0.insert(0);
      aVLTree0.getRoot();
      aVLTree0.find(0);
      aVLTree0.getRoot();
      aVLTree0.insert((-518));
      aVLTree0.insert((-3257));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(393);
      aVLTree0.getRoot();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      int int0 = 0;
      aVLTree0.insert(0);
      aVLTree0.insert((-3662));
      // Undeclared exception!
      try { 
        aVLTree0.delete(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete((-2677));
      aVLTree0.height();
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node((-2677));
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.find((-1));
      aVLTree0.height();
      aVLTree0.insert(433);
      aVLTree0.getRoot();
      aVLTree0.height();
      aVLTree0.insert(0);
      aVLTree0.insert((-278));
      AVLTree.Node aVLTree_Node1 = aVLTree0.find(0);
      aVLTree0.delete(0);
      aVLTree0.getBalance(aVLTree_Node1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      aVLTree0.insert((-1));
      // Undeclared exception!
      try { 
        aVLTree0.delete(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete((-3175));
      aVLTree0.delete((-3175));
      aVLTree0.getRoot();
      aVLTree0.getRoot();
      aVLTree0.find((-36));
      aVLTree0.delete((-36));
      aVLTree0.insert((-36));
      aVLTree0.insert((-1));
      aVLTree0.insert(0);
      aVLTree0.height();
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node((-1035));
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.height();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(0);
      aVLTree0.delete(4081);
      aVLTree0.delete(4081);
      aVLTree0.insert(0);
      aVLTree0.delete(0);
      aVLTree0.delete(0);
      aVLTree0.height();
      aVLTree0.find(0);
      aVLTree0.getRoot();
      aVLTree0.insert(0);
      aVLTree0.delete((-127));
      aVLTree0.delete(2);
      aVLTree0.height();
      aVLTree0.getBalance((AVLTree.Node) null);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      aVLTree0.height();
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.height();
      aVLTree0.height();
      aVLTree0.find(261);
      aVLTree0.getBalance((AVLTree.Node) null);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      AVLTree aVLTree1 = new AVLTree();
      AVLTree.Node aVLTree_Node0 = aVLTree1.new Node(749);
      aVLTree0.getBalance(aVLTree_Node0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      int int0 = 2360;
      aVLTree0.insert(2360);
      int int1 = (-671);
      aVLTree0.find((-671));
      aVLTree0.delete((-671));
      aVLTree0.getRoot();
      aVLTree0.getRoot();
      aVLTree0.insert((-671));
      aVLTree0.insert(0);
      aVLTree0.delete(2360);
      aVLTree0.height();
      aVLTree0.delete(2360);
      // Undeclared exception!
      try { 
        aVLTree0.insert((-671));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(489);
      aVLTree0.insert(0);
      aVLTree0.height();
      aVLTree0.insert((-94));
      aVLTree0.insert(1);
      aVLTree0.getRoot();
      aVLTree0.height();
      aVLTree0.delete(2);
      aVLTree0.find(489);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.getRoot();
      aVLTree0.getBalance((AVLTree.Node) null);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(1229);
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(1229);
      aVLTree_Node0.height = (-1696);
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.getRoot();
      aVLTree0.getRoot();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(0);
      aVLTree0.delete(1379);
      int int0 = 0;
      aVLTree0.delete(0);
      aVLTree0.insert(0);
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      aVLTree0.height();
      aVLTree_Node0.key = 0;
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-1190));
      aVLTree0.insert(1031);
      aVLTree0.insert(0);
      aVLTree0.delete(1749);
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node((-793));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-19));
      aVLTree0.delete((-1));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.height();
      aVLTree0.insert(1330);
      aVLTree0.delete((-1));
      aVLTree0.delete(664);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-3708));
      aVLTree0.find((-1173));
      aVLTree0.insert((-1173));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete((-1));
      aVLTree0.insert(447);
      aVLTree0.insert((-1));
      aVLTree0.height();
      aVLTree0.getRoot();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete((-1));
      aVLTree0.height();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(728);
      aVLTree0.insert((-3100));
      aVLTree0.insert(1);
      aVLTree0.find((-2));
      aVLTree0.find((-2));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(4073);
      aVLTree0.height();
      aVLTree0.find(0);
      aVLTree0.getRoot();
      aVLTree0.insert(0);
      aVLTree0.height();
      aVLTree0.getBalance((AVLTree.Node) null);
      aVLTree0.find(0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(5393);
      aVLTree0.insert(869);
      aVLTree0.insert((-1));
      aVLTree0.delete(5393);
      aVLTree0.delete((-530));
      aVLTree0.delete((-924));
      aVLTree0.insert((-4125));
      aVLTree0.insert(5393);
      aVLTree0.delete(1062);
      aVLTree0.getRoot();
      aVLTree0.insert(1);
      aVLTree0.delete((-1));
      aVLTree0.insert(0);
      aVLTree0.find(0);
      aVLTree0.insert((-288));
      aVLTree0.delete((-924));
      aVLTree0.getRoot();
      aVLTree0.find((-288));
      assertEquals(2, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(746);
      aVLTree0.height();
      aVLTree0.height();
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      aVLTree_Node0.key = 0;
      aVLTree_Node0.right = aVLTree_Node0;
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.delete(0);
      aVLTree0.getRoot();
      int int0 = aVLTree0.height();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      int int0 = 0;
      aVLTree0.insert(0);
      int int1 = (-342);
      aVLTree0.delete(0);
      aVLTree0.insert(0);
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }
}
